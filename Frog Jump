// RECURSIVE SOLUTION
// Time Complexity:- O(n), because the recursion is not called if the 
//                   the problem is already sloved for a particular index.
// Space Complexity:- O(n) is required for recursion stack space and another
//                    O(n) is because we are using a dp array.
// int frogJumpHelper(int index, vector<int> &heights, vector<int> &dp){
//     if(index == 0){
//         return 0;
//     }

//     if(dp[index] != -1){
//         return dp[index];
//     }

//     int left = frogJumpHelper(index - 1 , heights, dp) + abs(heights[index] - heights[index - 1]);
//     int right = INT_MAX;

//     if(index > 1){
//         right = frogJumpHelper(index - 2 , heights, dp) + abs(heights[index] - heights[index - 2]);
//     }

//     return dp[index] = min(left, right);
// }

// int frogJump(int n, vector<int> &heights)
// {
//     vector<int> dp(n + 1, -1);
//     return frogJumpHelper(n - 1, heights, dp);
// }

// ITERATIVE SOLUTION
// Time Complexity:- O(n)
// Space Complexity:- O(n)
// int frogJump(int index, vector<int> &heights){
//     int n = heights.size();
//     vector<int> dp(n, 0);
//     dp[0] = 0;

//     for(int i = 1; i < heights.size(); i++){
//         int firstStep = dp[i - 1] + abs(heights[i] - heights[i - 1]);
//         int secondStep = INT_MAX;

//         if(i >= 2){
//             secondStep = dp[i - 2] + abs(heights[i] - heights[i - 2]);
//         }

//         dp[i] = min(firstStep, secondStep);
//     }
21
//     return dp[n - 1];
// }

// OPTIMAL SOLUTION
// Time Complexity:- O(n)
// Space Complexity:- O(1)
int frogJump(int index, vector<int> &heights){
    int n = heights.size();
    int prev = 0;
    int prev2 = 0;

    for(int i = 1; i < heights.size(); i++){
        int firstStep = prev + abs(heights[i] - heights[i - 1]);
        int secondStep = INT_MAX;

        if(i >= 2){
            secondStep = prev2 + abs(heights[i] - heights[i - 2]);
        }

        int curi = min(firstStep, secondStep);
        prev2 = prev;
        prev = curi;
    }

    return prev;
}
