#include <bits/stdc++.h> 
// Following is the Binary Tree node structure
/**************
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
    
};
***************/
class BSTIterator {
    stack<BinaryTreeNode<int>*> st;
    bool reverse=true;
    void pushAll(BinaryTreeNode<int>* root){
        while(root){
            st.push(root);
            if(reverse==true){
                root=root->right;
            }
            else{
                root=root->left;
            }
        }
    }
public:
    BSTIterator(BinaryTreeNode<int>* root, bool isReverse) {
        reverse=isReverse;
        pushAll(root);
    }
    
    int next() {
        BinaryTreeNode<int>* node=st.top();
        st.pop();
        if(!reverse){
            pushAll(node->right);;
        }
        else{
            pushAll(node->left);
        }
        return node->data;
    }
    
    bool hasNext() {
        return !st.empty();
    }
};
bool twoSumInBST(BinaryTreeNode<int>* root, int k) {
	//Write your code here
    if(!root){
        return false;
    }
    BSTIterator l(root, false);
    BSTIterator r(root, true);
    int i=l.next();
    int j=r.next();
    while(i<j){
        if(i+j==k){
            return true;
        }
        else if(i+j>k){
            j=r.next();
        }
        else{
            i=l.next();
        }
    }
    return false;
}
