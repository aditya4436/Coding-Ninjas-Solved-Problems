/*************************************************************

    Following is the Binary Tree node structure for reference:

    class BinaryTreeNode{
	public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

*************************************************************/
void markParent(BinaryTreeNode<int> *root, unordered_map<BinaryTreeNode<int>*, BinaryTreeNode<int>*> &parent_track, BinaryTreeNode<int>* target){
    if(!root){
        return;
    }
    queue<BinaryTreeNode<int>*>q;
    q.push(root);
    while(!q.empty()){
        BinaryTreeNode<int>* node=q.front();
        q.pop();
        if(node->left){
            parent_track[node->left]=node;
            q.push(node->left);
        }
        if(node->right){
            parent_track[node->right]=node;
            q.push(node->right);
        }
    }
}
vector<BinaryTreeNode<int>*> printNodesAtDistanceK(BinaryTreeNode<int>* root, BinaryTreeNode<int>* target, int K) {
    // Write your code here.
        unordered_map<BinaryTreeNode<int>*, BinaryTreeNode<int>*>parent_track;
        markParent(root, parent_track, target);
        unordered_map<BinaryTreeNode<int>*, bool> visited;
        queue<BinaryTreeNode<int>*> q;
        q.push(target);
        visited[target]=true;
        int curr_level=0;
        while(!q.empty()){
            int size=q.size();
            if(curr_level++==K){
                break;
            }
            for(int i=0; i<size; i++){
                BinaryTreeNode<int> *node=q.front();
                q.pop();
                if(node->left && !visited[node->left]){
                    q.push(node->left);
                    visited[node->left]=true;
                }
                if(node->right && !visited[node->right]){
                    q.push(node->right);
                    visited[node->right]=true;
                }
                if(parent_track[node] && !visited[parent_track[node]]){
                    q.push(parent_track[node]);
                    visited[parent_track[node]]=true;
                }
            }
        }
        vector<BinaryTreeNode<int>*> ans;
        while(!q.empty()){
            BinaryTreeNode<int> *node=q.front();
            q.pop();
            ans.push_back(node);
        }
        return ans;
}
