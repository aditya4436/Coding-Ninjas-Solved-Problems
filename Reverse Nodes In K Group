/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node* kReverse(Node* head, int k) {
    // Write your code here.
    if(head==NULL || k==1){
        return head;
    }
    int count=0;
    Node *updatedList=new Node(0);
    updatedList->next=head;
    Node *previous=updatedList, *following=updatedList, *current=updatedList;
    while(current->next!=NULL){
        current=current->next;
        count++;
    }
    while(count>=k){
        current=previous->next;
        following=current->next;
        for(int i=1; i<k; i++){
            current->next=following->next;
            following->next=previous->next;
            previous->next=following;
            following=current->next;
        }
        previous=current;
        count-=k;
    }
    return updatedList->next;
}
