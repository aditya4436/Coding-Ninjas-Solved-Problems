int LowerBound(vector<int> &arr, int target)
{
    int ans=arr.size();
    int low=0, high=ans-1;
    while(low<=high)
    {
        int mid=(low+high)/2;
        if(arr[mid]>=target)
        {
            ans=mid;
            high=mid-1;
        }
        else
        {
            low=mid+1;
        }
    }
    return ans;
}
int UpperBound(vector<int> &arr, int target)
{
    int ans=arr.size();
    int low=0, high=ans-1;
    while(low<=high)
    {
        int mid=(low+high)/2;
        if(arr[mid]>target)
        {
            ans=mid;
            high=mid-1;
        }
        else
        {
            low=mid+1;
        }
    }
    return ans;
}
pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)
{
    // Write your code here
    int first=LowerBound(arr, k);
    if(first==n || arr[first]!=k)
    {
        return {-1,-1};
    }
    int last=UpperBound(arr, k);
    return{first, last-1};
}
