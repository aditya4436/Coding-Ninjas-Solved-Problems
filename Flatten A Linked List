/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */
 Node *Merge(Node *a, Node *b){
	 Node *temp=new Node();
	 Node *result=temp;
	 while(a && b){
		 if(a->data<b->data){
			 temp->child=a;
			 temp=temp->child;
			 a=a->child;
		 }
		 else{
			 temp->child=b;
			 temp=temp->child;
			 b=b->child;
		 }
	 }
	 if(a){
		 temp->child=a;
	 }
	 else{
		 temp->child=b;
	 }
	 return result->child;
 }
Node* flattenLinkedList(Node* head) 
{
	// Write your code here
	if(head==NULL || head->next==NULL){
		return head;
	}
	head->next=flattenLinkedList(head->next);
	head=Merge(head, head->next);
	return head;
}
