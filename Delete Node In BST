/*************************************************************
    Following is the Binary Tree node structure

    template <typename T>
    class BinaryTreeNode
    {
    public:
        T data;
        BinaryTreeNode<T> *left, *right;
        BinaryTreeNode() : data(0), left(NULL), right(NULL) {}
        BinaryTreeNode(T x) : data(x), left(NULL), right(NULL) {}
        BinaryTreeNode(T x, BinaryTreeNode<T> *left, BinaryTreeNode<T> *right) : data(x), left(left), right(right) {}
    };

*************************************************************/
BinaryTreeNode<int>* findMin(BinaryTreeNode<int>* root){
    BinaryTreeNode<int>* current=root;
    while(current && current->left){
        current = current->left;
    }
    return current;
}
BinaryTreeNode<int>* deleteNode(BinaryTreeNode<int>* root, int key) {
    // Write your code here.
    if(!root){
        return root;
    }
    else if(key<root->data){
        root->left=deleteNode(root->left, key);
    }
    else if(key>root->data){
        root->right=deleteNode(root->right, key);
    }
    else{
        if (!root->left) {
            BinaryTreeNode<int> *temp=root->right;
            delete root;
            return temp;
        }
        else if (!root->right) {
            BinaryTreeNode<int> *temp=root->left;
            delete root;
            return temp;
        }
        BinaryTreeNode<int>* successor = findMin(root->right);
        root->data = successor->data;
        root->right = deleteNode(root->right, successor->data);
    }
    return root;
}
