#include <bits/stdc++.h> 
/*************************************************************

    Following is the Binary Tree node structure

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

*************************************************************/

vector<int> zigZagTraversal(BinaryTreeNode<int> *root)
{
    // Write your code here!
    vector<int> ans;
    if (root == NULL) {
        return ans;
    }
    bool leftToRight = true;
    queue<BinaryTreeNode<int>*> q;
    q.push(root);
    while (!q.empty()) {
        int size = q.size();
        vector<int> level;  // To store the nodes at the current level
        for (int i = 0; i < size; i++) {
            BinaryTreeNode<int> *node = q.front();
            q.pop();
            level.push_back(node->data);
            if (node->left) {
                q.push(node->left);
            }
            if (node->right) {
                q.push(node->right);
            }
        }
        if (!leftToRight) {
            reverse(level.begin(), level.end());
        }
        ans.insert(ans.end(), level.begin(), level.end());
        leftToRight = !leftToRight;
    }
    return ans;
}
